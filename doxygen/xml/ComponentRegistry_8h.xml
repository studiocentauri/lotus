<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="ComponentRegistry_8h" kind="file" language="C++">
    <compoundname>ComponentRegistry.h</compoundname>
    <includes refid="lotus__export_8h" local="no">lotus/lotus_export.h</includes>
    <includes local="no">lotus/internal/nlohmann/json.hpp</includes>
    <includes local="no">lotus/internal/entt/entt.hpp</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">functional</includes>
    <includedby refid="CCamera_8h" local="yes">/builds/centauri/lotus/lotus/include/lotus/ecs/components/CCamera.h</includedby>
    <includedby refid="CLight_8h" local="no">/builds/centauri/lotus/lotus/include/lotus/ecs/components/CLight.h</includedby>
    <includedby refid="CTransform_8h" local="yes">/builds/centauri/lotus/lotus/include/lotus/ecs/components/CTransform.h</includedby>
    <includedby refid="components_8h" local="no">/builds/centauri/lotus/lotus/include/lotus/physics/components.h</includedby>
    <includedby refid="lotus_8h" local="yes">/builds/centauri/lotus/lotus/include/lotus/lotus.h</includedby>
    <includedby refid="HDRI_8h" local="no">/builds/centauri/lotus/lotus/include/lotus/resources/HDRI.h</includedby>
    <incdepgraph>
      <node id="6">
        <label>functional</label>
      </node>
      <node id="4">
        <label>lotus/internal/entt/entt.hpp</label>
      </node>
      <node id="5">
        <label>unordered_map</label>
      </node>
      <node id="2">
        <label>lotus/lotus_export.h</label>
        <link refid="lotus__export_8h_source"/>
      </node>
      <node id="1">
        <label>/builds/centauri/lotus/lotus/include/lotus/ecs/ComponentRegistry.h</label>
        <link refid="ComponentRegistry_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>lotus/internal/nlohmann/json.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6">
        <label>/builds/centauri/lotus/lotus/include/lotus/resources/Material.h</label>
        <link refid="Material_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/builds/centauri/lotus/lotus/include/lotus/lotus.h</label>
        <link refid="lotus_8h_source"/>
      </node>
      <node id="8">
        <label>/builds/centauri/lotus/lotus/include/lotus/rendering/CMeshRenderer.h</label>
        <link refid="CMeshRenderer_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/builds/centauri/lotus/lotus/include/lotus/ecs/components/CLight.h</label>
        <link refid="CLight_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/builds/centauri/lotus/lotus/include/lotus/ecs/components/CCamera.h</label>
        <link refid="CCamera_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/builds/centauri/lotus/lotus/include/lotus/resources/Shader.h</label>
        <link refid="Shader_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/builds/centauri/lotus/lotus/include/lotus/ecs/ComponentRegistry.h</label>
        <link refid="ComponentRegistry_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/builds/centauri/lotus/lotus/include/lotus/resources/Model.h</label>
        <link refid="Model_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/builds/centauri/lotus/lotus/include/lotus/physics/components.h</label>
        <link refid="components_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/builds/centauri/lotus/lotus/include/lotus/ecs/components/CTransform.h</label>
        <link refid="CTransform_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/builds/centauri/lotus/lotus/include/lotus/resources/HDRI.h</label>
        <link refid="HDRI_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structLotus_1_1ComponentAssigner" prot="public">Lotus::ComponentAssigner</innerclass>
    <innernamespace refid="namespaceLotus">Lotus</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="ComponentRegistry_8h_1a45021cdaa76d0b04a876611f3b289fbf" prot="public" static="no">
        <name>GENERATED_BODY</name>
        <param><defname>COMPONENT</defname></param>
        <param><defname>...</defname></param>
        <initializer>    NLOHMANN_DEFINE_TYPE_INTRUSIVE(COMPONENT, __VA_ARGS__); \
    static std::string GetName() { return QUOTE(COMPONENT); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/builds/centauri/lotus/lotus/include/lotus/ecs/ComponentRegistry.h" line="10" column="9" bodyfile="/builds/centauri/lotus/lotus/include/lotus/ecs/ComponentRegistry.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ComponentRegistry_8h_1acddc9f003039109d031df7eba3aa43f5" prot="public" static="no">
        <type>std::string</type>
        <definition>using component_ctor_key_t =  std::string</definition>
        <argsstring></argsstring>
        <name>component_ctor_key_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/builds/centauri/lotus/lotus/include/lotus/ecs/ComponentRegistry.h" line="14" column="1" bodyfile="/builds/centauri/lotus/lotus/include/lotus/ecs/ComponentRegistry.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ComponentRegistry_8h_1a624d2081cd7814102d24b1d9a9c007d8" prot="public" static="no">
        <type>std::function&lt; void(const entt::entity, entt::registry &amp;, const nlohmann::json &amp;data)&gt;</type>
        <definition>using component_ctor_t =  std::function&lt;void(const entt::entity, entt::registry&amp;, const nlohmann::json&amp; data)&gt;</definition>
        <argsstring></argsstring>
        <name>component_ctor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/builds/centauri/lotus/lotus/include/lotus/ecs/ComponentRegistry.h" line="15" column="1" bodyfile="/builds/centauri/lotus/lotus/include/lotus/ecs/ComponentRegistry.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lotus/lotus_export.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lotus/internal/nlohmann/json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lotus/internal/entt/entt.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GENERATED_BODY(COMPONENT,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NLOHMANN_DEFINE_TYPE_INTRUSIVE(COMPONENT,<sp/>__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>std::string<sp/>GetName()<sp/>{<sp/>return<sp/>QUOTE(COMPONENT);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>component_ctor_key_t<sp/>=<sp/>std::string;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>component_ctor_t<sp/>=<sp/>std::function&lt;void(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>entt::entity,<sp/>entt::registry&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nlohmann::json&amp;<sp/>data)&gt;;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Lotus</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>LOTUS_API<sp/>std::unordered_map&lt;component_ctor_key_t,<sp/>component_ctor_t&gt;<sp/>ctors;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="22" refid="structLotus_1_1ComponentAssigner" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structLotus_1_1ComponentAssigner" kindref="compound">ComponentAssigner</ref></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Assign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>entt::entity<sp/>entity,<sp/>entt::registry&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nlohmann::json<sp/>&amp;<sp/>data)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>tmp;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from_json(data,<sp/>tmp);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.template<sp/>emplace_or_replace&lt;T&gt;(entity,<sp/>std::move(tmp));</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterComponent()</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctors.insert({T::GetName(),<sp/>&amp;<ref refid="structLotus_1_1ComponentAssigner" kindref="compound">ComponentAssigner&lt;T&gt;::Assign</ref>});</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>component_ctor_t&amp;<sp/>GetComponentCtor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctors.at(name);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/builds/centauri/lotus/lotus/include/lotus/ecs/ComponentRegistry.h"/>
  </compounddef>
</doxygen>
