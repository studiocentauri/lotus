
.. _program_listing_file_include_lotus_physics.h:

Program Listing for File physics.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_lotus_physics.h>` (``include\lotus\physics.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #pragma once
   
   // TODO: Remove glm here to make it a dev dependency only
   #include "internal/glm/glm.hpp"
   #include "internal/glm/gtc/matrix_transform.hpp"
   #include "internal/glm/gtx/matrix_decompose.hpp"
   
   typedef glm::ivec2 Vector2i;
   typedef glm::ivec3 Vector3i;
   typedef glm::ivec4 Vector4i;
   typedef glm::vec2 Vector2f;
   typedef glm::vec3 Vector3f;
   typedef glm::vec4 Vector4f;
   
   typedef glm::imat2x2 Matrix2i;
   typedef glm::imat3x3 Matrix3i;
   typedef glm::imat4x4 Matrix4i;
   typedef glm::mat2 Matrix2f;
   typedef glm::mat3 Matrix3f;
   typedef glm::mat4 Matrix4f;
   
   #define FRONT    Vector3f( 0.0f,  0.0f, -1.0f)
   #define BACK     Vector3f( 0.0f,  0.0f,  1.0f)
   #define LEFT     Vector3f(-1.0f,  0.0f,  0.0f)
   #define RIGHT    Vector3f( 1.0f,  0.0f,  0.0f)
   #define UP       Vector3f( 0.0f,  1.0f,  0.0f)
   #define DOWN     Vector3f( 0.0f, -1.0f,  0.0f)
   #define ORIGIN   Vector3f( 0.0f,  0.0f,  0.0f)
   
   #define X_AXIS RIGHT
   #define Y_AXIS UP
   #define Z_AXIS BACK
   
   namespace Lotus
   {
       Vector3f LNormalize(const Vector3f& vec);
   
       Vector3f LCross(const Vector3f& a, const Vector3f& b);
   
       Matrix4f LLookAt(const Vector3f& eye, const Vector3f& center, const Vector3f& up);
   
       Matrix4f LPerspective(float fov, float aspectRatio, float zNear, float zFar);
   
       Matrix4f LTranslate(const Matrix4f& mat, const Vector3f& translationVec);
   
       Matrix4f LScale(const Matrix4f& mat, const Vector3f& scaleVec);
   
       Matrix4f LRotate(Matrix4f mat, float deg, Vector3f axis);
   
       const float* valuePtr(const Matrix4f& mat);
   
       const float* valuePtr(const Vector3f& vec);
   }
