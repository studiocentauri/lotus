
.. _program_listing_file_include_lotus_ecs_Entity.h:

Program Listing for File Entity.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_lotus_ecs_Entity.h>` (``include\lotus\ecs\Entity.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "lotus/ecs/Recipe.h"
   #include "Event.h"
   
   namespace Lotus
   {
       typedef entt::entity EntityID;
   
       constexpr auto NULL_ENTITY = entt::null;
   
       class LOTUS_API Entity
       {
           EntityID _id = entt::null;
           entt::registry* _registry = nullptr;
   
       public:
           Entity(EntityID id, entt::registry* registry) : _id(id), _registry(registry) {}
   
           explicit operator EntityID() const
           {
               return _id;
           }
   
           template<typename Component, typename ...Args>
           Component& AddComponent(Args&& ...args)
           {
               return _registry->emplace<Component>(_id, std::forward<Args>(args)...);
           }
   
           template<typename... Components>
           decltype(auto) GetComponent()
           {
               return _registry->get<Components...>(_id);
           }
   
           // ReSharper disable once CppMemberFunctionMayBeConst
           void Destroy()
           {
               _registry->destroy(_id);
           }
   
           // TODO: Implement
           static std::vector<nlohmann::json> GetRecipe()
           {
               const nlohmann::json data = {
                       {"component_name", "value"}
               };
   
               return { data };
           }
       };
   
       template <typename T>
       struct LOTUS_API ComponentCreateEvent : public Event
       {
           EntityID entityID;
       };
   
       void ECSInitialize();
       void ECSShutdown();
   
   //    LOTUS_API entt::registry* GetRegistry();
   //    LOTUS_API Entity CreateEntity();
   //    LOTUS_API Entity CreateEntity(const Recipe& recipe);
   }
