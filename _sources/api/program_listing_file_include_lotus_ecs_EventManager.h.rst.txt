
.. _program_listing_file_include_lotus_ecs_EventManager.h:

Program Listing for File EventManager.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_lotus_ecs_EventManager.h>` (``include\lotus\ecs\EventManager.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "lotus/lcommon.h"
   #include "lotus/internal/entt/entt.hpp"
   #include "lotus/ecs/Event.h"
   
   template<typename T>
   constexpr auto CREATE_OF_TYPE = std::remove_reference<T>();
   
   namespace Lotus
   {
       class LOTUS_API EventManager : public Singleton<EventManager>
       {
           entt::dispatcher _dispatcher{};
   
       public:
   
           template<typename T>
           void Dispatch(T event)
           {
               static_assert(std::is_base_of_v<Event, T>);
               if (event.Immediate)
               {
                   _dispatcher.trigger<T>(event);
               }
               else
               {
                   _dispatcher.enqueue<T>(event);
               }
           }
   
           template<typename E, auto F, typename L>
           void Bind(L arg)
           {
               static_assert(std::is_base_of_v<Event, E>);
               _dispatcher.sink<E>().template connect<F>(std::forward<L>(arg));
           }
   
           template<typename E, auto F>
           void Bind()
           {
               static_assert(std::is_base_of_v<Event, E>);
               _dispatcher.sink<E>().template connect<F>();
           }
   
           void DispatchAll() const
           {
               // Call all events in queue
               _dispatcher.update();
           }
   
       private:
           friend Singleton<EventManager>;
           EventManager() = default;
       };
   }
